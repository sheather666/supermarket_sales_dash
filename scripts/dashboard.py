import streamlit as st
import pandas as pd
from sqlalchemy import create_engine

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URI = 'postgresql://postgres:1234@localhost:5432/postgres'
engine = create_engine(DATABASE_URI)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
def load_filtered_data(date_range, product_keywords, cashier_keywords):
    filters = []
    if len(date_range) == 2:
        filters.append(f"sale_date BETWEEN '{date_range[0]}' AND '{date_range[1]}'")
    if product_keywords.strip():
        product_conditions = " OR ".join([f"product_name ILIKE '%%{kw.strip()}%%'" for kw in product_keywords.split(',') if kw.strip()])
        filters.append(f"({product_conditions})")
    if cashier_keywords.strip():
        cashier_conditions = " OR ".join([f"cashier_name ILIKE '%%{kw.strip()}%%'" for kw in cashier_keywords.split(',') if kw.strip()])
        filters.append(f"({cashier_conditions})")
    
    where_clause = " AND ".join(filters) if filters else "1=1"

    query = f"""
        SELECT *
        FROM supermarket_sales.sales
        WHERE {where_clause}
    """
    return pd.read_sql(query, engine)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ–¥–∞–∂ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞")
st.markdown(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–µ–≤–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. "
    "–ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
)

# **–§–∏–ª—å—Ç—Ä—ã**
st.sidebar.header("üîé –§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
date_query = "SELECT MIN(sale_date) AS min_date, MAX(sale_date) AS max_date FROM supermarket_sales.sales"
dates = pd.read_sql(date_query, engine)
min_date = dates['min_date'][0]
max_date = dates['max_date'][0]
date_range = st.sidebar.date_input(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
    [min_date, max_date],
    min_value=min_date,
    max_value=max_date,
)

# –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä–∞–º (—Å –ø–æ–∏—Å–∫–æ–º)
product_keywords = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", "")

# –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Å—Å–∏—Ä–∞–º (—Å –ø–æ–∏—Å–∫–æ–º)
cashier_keywords = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Å—Å–∏—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", "")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = load_filtered_data(date_range, product_keywords, cashier_keywords)

# **–†–∞–∑–¥–µ–ª 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**
st.header("üìå –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
total_revenue = data['total_amount'].sum()
total_sales = data['quantity'].sum()
avg_receipt = total_revenue / data['receipt_number'].nunique() if data['receipt_number'].nunique() > 0 else 0
st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.2f} —Ä—É–±.")
st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂", total_sales)
st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_receipt:,.2f} —Ä—É–±.")

# **–†–∞–∑–¥–µ–ª 2: –¢—Ä–µ–Ω–¥—ã**
st.header("üìà –¢—Ä–µ–Ω–¥—ã")
# –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º
revenue_by_day = data.groupby('sale_date')['total_amount'].sum()
st.line_chart(revenue_by_day)
st.caption("–≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã—Ä—É—á–∫–∞ –∏–∑–º–µ–Ω—è–ª–∞—Å—å —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.")

# **–†–∞–∑–¥–µ–ª 3: –¢–æ–ø—ã**
st.header("üèÜ –¢–æ–ø—ã")
# –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤
st.subheader("–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂")
top_products = data.groupby('product_name')['quantity'].sum().sort_values(ascending=False).head(10)
st.bar_chart(top_products)
st.caption("–ù–∞ —ç—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂.")

# –¢–æ–ø-10 –∫–∞—Å—Å–∏—Ä–æ–≤
st.subheader("–¢–æ–ø-10 –∫–∞—Å—Å–∏—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ")
top_cashiers = data.groupby('cashier_name')['total_amount'].sum().sort_values(ascending=False).head(10)
st.bar_chart(top_cashiers)
st.caption("–≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –∫–∞—Å—Å–∏—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –≤—ã—Ä—É—á–∫—É.")

# **–†–∞–∑–¥–µ–ª 4: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤**
st.header("üîó –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
basket_data = data.groupby('receipt_number')['product_name'].apply(list)
from collections import Counter
from itertools import combinations

basket_combinations = Counter()
for basket in basket_data:
    basket_combinations.update(combinations(sorted(basket), 2))

top_combinations = basket_combinations.most_common(10)
combos = [f"{a} & {b}" for (a, b), count in top_combinations]
counts = [count for (a, b), count in top_combinations]

st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
combos_df = pd.DataFrame({'–ö–æ–º–±–∏–Ω–∞—Ü–∏—è': combos, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': counts})
st.bar_chart(combos_df.set_index('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è'))
st.table(combos_df)

# **–†–∞–∑–¥–µ–ª 5: –¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π**
st.header("üí∏ –¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π")
discount_data = data[data['discount'] > 0]
discount_revenue = discount_data['total_amount'].sum()
discount_share = (discount_revenue / total_revenue) * 100 if total_revenue > 0 else 0
st.metric("–í—ã—Ä—É—á–∫–∞ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏", f"{discount_revenue:,.2f} —Ä—É–±.")
st.metric("–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏", f"{discount_share:.2f} %")
top_discounted_products = discount_data.groupby('product_name')['total_amount'].sum().sort_values(ascending=False).head(10)
st.bar_chart(top_discounted_products)